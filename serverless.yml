service: poc-backend
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "bedrock:InvokeModel"
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: "*"
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
    PASSWORD_DB: "Fir3ball%23"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
functions:
  api:
    handler: index.handler
    events:
      - http:
          path: /
          method: get
          cors: true
  bedrock:
    handler: Lambda/bedrock.handler
    timeout: 20
    events:
      - http:
          path: /bedrock
          method: get

  loginUser:
    handler: user/login.handler
    events:
      - http:
          path: /login
          method: post
          cors: true
  signupUser:
    handler: user/signup.handler
    events:
      - http:
          path: /signup
          method: post
          cors: true
  addProject:
    handler: Lambda/addProgetto.handler
    events:
      - http:
          path: /addProgetto
          method: post
          cors: true
  addUser:
    handler: Lambda/addUser.handler
    events:
      - http:
          path: /addUser
          method: post
          cors: true
  addEpicStory:
    handler: Lambda/addEpicStory.handler
    events:
      - http:
          path: /addEpicStory
          method: post
          cors: true
  addUserStory:
    handler: Lambda/addUserStory.handler
    events:
      - http:
          path: /addUserStory
          method: post
          cors: true
  delateProject:
    handler: Lambda/delateProject.handler
    events:
      - http:
          path: /delateProject
          method: post
          cors: true
  getProject:
    handler: Lambda/getProgetto.handler
    events:
      - http:
          path: /getProject
          method: get
          cors: true
  getProjects:
    handler: Lambda/getProgetti.handler
    events:
      - http:
          path: /getProjects
          method: get
          cors: true
  addFeedback:
    handler: Lambda/addFeedback.handler
    events:
      - http:
          path: /addFeedback
          method: post
          cors: true

  setState:
    handler: Lambda/setState.handler
    events:
      - http:
          path: /setState
          method: post
          cors: true
  setDev:
    handler: Lambda/setDev.handler
    events:
      - http:
          path: /setDev
          method: post
          cors: true
resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
